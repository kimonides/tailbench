<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="huff__code_8c" kind="file" language="C++">
    <compoundname>huff_code.c</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="huff__code_8h" local="yes">sphinxbase/huff_code.h</includes>
    <includes refid="ckd__alloc_8h" local="yes">sphinxbase/ckd_alloc.h</includes>
    <includes refid="hash__table_8h" local="yes">sphinxbase/hash_table.h</includes>
    <includes refid="byteorder_8h" local="yes">sphinxbase/byteorder.h</includes>
    <includes refid="heap_8h" local="yes">sphinxbase/heap.h</includes>
    <includes refid="pio_8h" local="yes">sphinxbase/pio.h</includes>
    <includes refid="err_8h" local="yes">sphinxbase/err.h</includes>
    <incdepgraph>
      <node id="2272">
        <label>sys/stat.h</label>
      </node>
      <node id="2263">
        <label>stdarg.h</label>
      </node>
      <node id="2271">
        <label>sphinxbase/pio.h</label>
        <link refid="pio_8h"/>
        <childnode refid="2258" relation="include">
        </childnode>
        <childnode refid="2272" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
      </node>
      <node id="2265">
        <label>stdlib.h</label>
      </node>
      <node id="2266">
        <label>setjmp.h</label>
      </node>
      <node id="2274">
        <label>errno.h</label>
      </node>
      <node id="2260">
        <label>sphinxbase/prim_type.h</label>
        <link refid="prim__type_8h"/>
        <childnode refid="2261" relation="include">
        </childnode>
      </node>
      <node id="2259">
        <label>sphinxbase/sphinxbase_export.h</label>
        <link refid="sphinxbase__export_8h_source"/>
      </node>
      <node id="2257">
        <label>sphinxbase/huff_code.h</label>
        <link refid="huff__code_8h"/>
        <childnode refid="2258" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
        <childnode refid="2262" relation="include">
        </childnode>
      </node>
      <node id="2273">
        <label>sphinxbase/err.h</label>
        <link refid="err_8h"/>
        <childnode refid="2263" relation="include">
        </childnode>
        <childnode refid="2258" relation="include">
        </childnode>
        <childnode refid="2265" relation="include">
        </childnode>
        <childnode refid="2274" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
      </node>
      <node id="2261">
        <label>sphinx_config.h</label>
      </node>
      <node id="2268">
        <label>sphinxbase/glist.h</label>
        <link refid="glist_8h"/>
        <childnode refid="2265" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
      </node>
      <node id="2262">
        <label>sphinxbase/cmd_ln.h</label>
        <link refid="cmd__ln_8h"/>
        <childnode refid="2258" relation="include">
        </childnode>
        <childnode refid="2263" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
      </node>
      <node id="2256">
        <label>string.h</label>
      </node>
      <node id="2270">
        <label>sphinxbase/heap.h</label>
        <link refid="heap_8h"/>
        <childnode refid="2265" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
      </node>
      <node id="2269">
        <label>sphinxbase/byteorder.h</label>
        <link refid="byteorder_8h_source"/>
      </node>
      <node id="2264">
        <label>sphinxbase/ckd_alloc.h</label>
        <link refid="ckd__alloc_8h"/>
        <childnode refid="2265" relation="include">
        </childnode>
        <childnode refid="2266" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
      </node>
      <node id="2267">
        <label>sphinxbase/hash_table.h</label>
        <link refid="hash__table_8h"/>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
        <childnode refid="2268" relation="include">
        </childnode>
      </node>
      <node id="2255">
        <label>src/libsphinxbase/util/huff_code.c</label>
        <link refid="huff__code_8c"/>
        <childnode refid="2256" relation="include">
        </childnode>
        <childnode refid="2257" relation="include">
        </childnode>
        <childnode refid="2264" relation="include">
        </childnode>
        <childnode refid="2267" relation="include">
        </childnode>
        <childnode refid="2269" relation="include">
        </childnode>
        <childnode refid="2270" relation="include">
        </childnode>
        <childnode refid="2271" relation="include">
        </childnode>
        <childnode refid="2273" relation="include">
        </childnode>
      </node>
      <node id="2258">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structhuff__node__s" prot="public">huff_node_s</innerclass>
    <innerclass refid="structhuff__codeword__s" prot="public">huff_codeword_s</innerclass>
    <innerclass refid="structhuff__code__s" prot="public">huff_code_s</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="huff__code_8c_1a99fb83031ce9923c84392b4e92f956b5" prot="public" static="no">
        <name>@2</name>
        <enumvalue id="huff__code_8c_1a99fb83031ce9923c84392b4e92f956b5aa2bf81272a1c011c3d21913679c89a5c" prot="public">
          <name>HUFF_CODE_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="huff__code_8c_1a99fb83031ce9923c84392b4e92f956b5a92f50391168e306ae129169e5015a400" prot="public">
          <name>HUFF_CODE_STR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="66" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="66" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="huff__code_8c_1ae5c0c809e1096e073c1de2cd6fb306e3" prot="public" static="no">
        <type>struct <ref refid="structhuff__node__s" kindref="compound">huff_node_s</ref></type>
        <definition>typedef struct huff_node_s  huff_node_t</definition>
        <argsstring></argsstring>
        <name>huff_node_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="56" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="huff__code_8c_1ad157c3e84ba1f570339531138b8ca519" prot="public" static="no">
        <type>struct <ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_s</ref></type>
        <definition>typedef struct huff_codeword_s  huff_codeword_t</definition>
        <argsstring></argsstring>
        <name>huff_codeword_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="64" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="huff__code_8c_1a22d55718cc487c07236a86ff8ec73db3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
        <definition>static huff_node_t* huff_node_new_int</definition>
        <argsstring>(int32 val)</argsstring>
        <name>huff_node_new_int</name>
        <param>
          <type>int32</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="85" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1aa21d9e854d596334f57c31bd59e1615e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
        <definition>static huff_node_t* huff_node_new_str</definition>
        <argsstring>(char const *val)</argsstring>
        <name>huff_node_new_str</name>
        <param>
          <type>char const *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="93" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a1685bc6b03d61aee84be682eef8b1811" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
        <definition>static huff_node_t* huff_node_new_parent</definition>
        <argsstring>(huff_node_t *l, huff_node_t *r)</argsstring>
        <name>huff_node_new_parent</name>
        <param>
          <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="101" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="101" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a25a6e4ca6fdfd5be96e5835c8bd4ce3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void huff_node_free_int</definition>
        <argsstring>(huff_node_t *root)</argsstring>
        <name>huff_node_free_int</name>
        <param>
          <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="115" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a0985979df99c70bc62354a9768932ea6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void huff_node_free_str</definition>
        <argsstring>(huff_node_t *root, int freestr)</argsstring>
        <name>huff_node_free_str</name>
        <param>
          <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>freestr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="125" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1ae49c3617d07fcf486c86d53d9b27f432" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
        <definition>static huff_node_t* huff_code_build_tree</definition>
        <argsstring>(heap_t *q)</argsstring>
        <name>huff_code_build_tree</name>
        <param>
          <type><ref refid="structheap__s" kindref="compound">heap_t</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="139" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="139" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a76c50ad949e663526b18607f3bd74105" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void huff_code_canonicalize</definition>
        <argsstring>(huff_code_t *hc, huff_node_t *root)</argsstring>
        <name>huff_code_canonicalize</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref> *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="158" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="158" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1aeac9c787bd2b0c44645fc36668c8cb72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
        <definition>huff_code_t* huff_code_build_int</definition>
        <argsstring>(int32 const *values, int32 const *frequencies, int nvals)</argsstring>
        <name>huff_code_build_int</name>
        <param>
          <type>int32 const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int32 const *</type>
          <declname>frequencies</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvals</declname>
        </param>
        <briefdescription>
<para>Create a codebook from 32-bit integer data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="229" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="229" bodyend="266"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="heap_8h_1a9bc21333ce58caaf58e802d8b0190efd" compoundref="heap_8c" startline="113" endline="117">heap_new</references>
        <references refid="heap_8h_1a64bcded2de5086c5d246ff760caa74a3" compoundref="heap_8c" startline="161" endline="165">heap_insert</references>
        <references refid="heap_8h_1ab12b1efd6392eb574d2da9c981e7320c" compoundref="heap_8c" startline="281" endline="292">heap_destroy</references>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1ae36c06fbf1ea3d3d8b8898489b8d0555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
        <definition>huff_code_t* huff_code_build_str</definition>
        <argsstring>(char *const *values, int32 const *frequencies, int nvals)</argsstring>
        <name>huff_code_build_str</name>
        <param>
          <type>char *const *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int32 const *</type>
          <declname>frequencies</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvals</declname>
        </param>
        <briefdescription>
<para>Create a codebook from string data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="269" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="269" bodyend="306"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="heap_8h_1a9bc21333ce58caaf58e802d8b0190efd" compoundref="heap_8c" startline="113" endline="117">heap_new</references>
        <references refid="heap_8h_1a64bcded2de5086c5d246ff760caa74a3" compoundref="heap_8c" startline="161" endline="165">heap_insert</references>
        <references refid="heap_8h_1ab12b1efd6392eb574d2da9c981e7320c" compoundref="heap_8c" startline="281" endline="292">heap_destroy</references>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a56e0b59ab72965a106d981edfcb80a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
        <definition>huff_code_t* huff_code_read</definition>
        <argsstring>(FILE *infh)</argsstring>
        <name>huff_code_read</name>
        <param>
          <type>FILE *</type>
          <declname>infh</declname>
        </param>
        <briefdescription>
<para>Read a codebook from a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="309" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="309" bodyend="365"/>
        <references refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" compoundref="ckd__alloc_8h" startline="248">ckd_calloc</references>
        <references refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" compoundref="hash__table_8c" startline="158" endline="169">hash_table_new</references>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a00510cb2e10d3257cebb637c1f92967e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int huff_code_write</definition>
        <argsstring>(huff_code_t *hc, FILE *outfh)</argsstring>
        <name>huff_code_write</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>outfh</declname>
        </param>
        <briefdescription>
<para>Write a codebook to a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="368" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="368" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1ad9d71a0121d0d7901df3637b8d3015da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int huff_code_dump_codebits</definition>
        <argsstring>(FILE *dumpfh, uint32 nbits, uint32 codeword)</argsstring>
        <name>huff_code_dump_codebits</name>
        <param>
          <type>FILE *</type>
          <declname>dumpfh</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>codeword</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="410" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="410" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a13073aec67ffe7c7d01dfeba7aefacf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int huff_code_dump</definition>
        <argsstring>(huff_code_t *hc, FILE *dumpfh)</argsstring>
        <name>huff_code_dump</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>dumpfh</declname>
        </param>
        <briefdescription>
<para>Print a codebook to a file as text (for debugging) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="420" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="420" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a65f498a58da214934dd19d6892bd838d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
        <definition>huff_code_t* huff_code_retain</definition>
        <argsstring>(huff_code_t *hc)</argsstring>
        <name>huff_code_retain</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <briefdescription>
<para>Retain a pointer to a Huffman codec object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="443" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="443" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1ae11af2c92c2eb047cb926dd97789eea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int huff_code_free</definition>
        <argsstring>(huff_code_t *hc)</argsstring>
        <name>huff_code_free</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <briefdescription>
<para>Release a pointer to a Huffman codec object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="450" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="450" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a967b15414f2a48342cdf8dd6488a934a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* huff_code_attach</definition>
        <argsstring>(huff_code_t *hc, FILE *fh, char const *mode)</argsstring>
        <name>huff_code_attach</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fh</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Attach a Huffman codec to a file handle for input/output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="475" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="475" bodyend="483"/>
        <references refid="huff__code_8h_1a403f575701c1d5fd2ddef1d001cf53e3" compoundref="huff__code_8c" startline="486" endline="497">huff_code_detach</references>
        <references refid="pio_8h_1a82e4694a4c13c96550f2410f8c63b1f5" compoundref="pio_8c" startline="541" endline="549">bit_encode_attach</references>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a197d8985c1f32747b5b1b116b246ccc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* huff_code_detach</definition>
        <argsstring>(huff_code_t *hc)</argsstring>
        <name>huff_code_detach</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <briefdescription>
<para>Detach a Huffman codec from its file handle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="486" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="486" bodyend="497"/>
        <references refid="pio_8h_1a3e818645e567961225977a1923debc3d" compoundref="pio_8c" startline="610" endline="617">bit_encode_flush</references>
        <references refid="pio_8h_1a8330637520174419771670ed740c9049" compoundref="pio_8c" startline="559" endline="568">bit_encode_free</references>
        <referencedby refid="huff__code_8h_1a9698821197737e3e1be9533a3059c82c" compoundref="huff__code_8c" startline="475" endline="483">huff_code_attach</referencedby>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a2813bf45e26e8af3d3bb37c4821a3cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int huff_code_encode_int</definition>
        <argsstring>(huff_code_t *hc, int32 sym, uint32 *outcw)</argsstring>
        <name>huff_code_encode_int</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>int32</type>
          <declname>sym</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>outcw</declname>
        </param>
        <briefdescription>
<para>Encode an integer, writing it to the file handle, if any. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="500" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="500" bodyend="513"/>
        <references refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" compoundref="hash__table_8c" startline="344" endline="362">hash_table_lookup_bkey</references>
        <references refid="pio_8h_1ae71dedb663c8e3ae8b91dbfbc95ac420" compoundref="pio_8c" startline="598" endline="607">bit_encode_write_cw</references>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a2312cc30520a54f4e46a92fefa82fe7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int huff_code_encode_str</definition>
        <argsstring>(huff_code_t *hc, char const *sym, uint32 *outcw)</argsstring>
        <name>huff_code_encode_str</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>sym</declname>
        </param>
        <param>
          <type>uint32 *</type>
          <declname>outcw</declname>
        </param>
        <briefdescription>
<para>Encode a string, writing it to the file handle, if any. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="516" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="516" bodyend="528"/>
        <references refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" compoundref="hash__table_8c" startline="309" endline="326">hash_table_lookup</references>
        <references refid="pio_8h_1ae71dedb663c8e3ae8b91dbfbc95ac420" compoundref="pio_8c" startline="598" endline="607">bit_encode_write_cw</references>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1a182430bbac6ac87abbff622fd3775480" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref> *</type>
        <definition>static huff_codeword_t* huff_code_decode_data</definition>
        <argsstring>(huff_code_t *hc, char const **inout_data, size_t *inout_data_len, int *inout_offset)</argsstring>
        <name>huff_code_decode_data</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>inout_data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>inout_data_len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>inout_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="531" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="531" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1ae149087611f623b01736674ba2d90995" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref> *</type>
        <definition>static huff_codeword_t* huff_code_decode_fh</definition>
        <argsstring>(huff_code_t *hc)</argsstring>
        <name>huff_code_decode_fh</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="576" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="576" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1aa1eb2eb1261251af7875d022611e3b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int huff_code_decode_int</definition>
        <argsstring>(huff_code_t *hc, int *outval, char const **inout_data, size_t *inout_data_len, int *inout_offset)</argsstring>
        <name>huff_code_decode_int</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outval</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>inout_data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>inout_data_len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>inout_offset</declname>
        </param>
        <briefdescription>
<para>Decode an integer, reading it from the file if no data given. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="612" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="612" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="huff__code_8c_1acd63ae1d68e8fb50c9bd7b7b6030badd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* huff_code_decode_str</definition>
        <argsstring>(huff_code_t *hc, char const **inout_data, size_t *inout_data_len, int *inout_offset)</argsstring>
        <name>huff_code_decode_str</name>
        <param>
          <type><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref> *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>inout_data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>inout_data_len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>inout_offset</declname>
        </param>
        <briefdescription>
<para>Decode a string, reading it from the file if no data given. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/libsphinxbase/util/huff_code.c" line="634" column="1" bodyfile="src/libsphinxbase/util/huff_code.c" bodystart="634" bodyend="651"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c-basic-offset:<sp/>4;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2009<sp/>Carnegie<sp/>Mellon<sp/>University.<sp/><sp/>All<sp/>rights</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>work<sp/>was<sp/>supported<sp/>in<sp/>part<sp/>by<sp/>funding<sp/>from<sp/>the<sp/>Defense<sp/>Advanced<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Research<sp/>Projects<sp/>Agency<sp/>and<sp/>the<sp/>National<sp/>Science<sp/>Foundation<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>United<sp/>States<sp/>of<sp/>America,<sp/>and<sp/>the<sp/>CMU<sp/>Sphinx<sp/>Speech<sp/>Consortium.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESSED<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>CARNEGIE<sp/>MELLON<sp/>UNIVERSITY</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>NOR<sp/>ITS<sp/>EMPLOYEES<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>====================================================================</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="huff__code_8h" kindref="compound">sphinxbase/huff_code.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ckd__alloc_8h" kindref="compound">sphinxbase/ckd_alloc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash__table_8h" kindref="compound">sphinxbase/hash_table.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sphinxbase/byteorder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="heap_8h" kindref="compound">sphinxbase/heap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pio_8h" kindref="compound">sphinxbase/pio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="err_8h" kindref="compound">sphinxbase/err.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structhuff__node__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhuff__node__s" kindref="compound">huff_node_s</ref><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhuff__node__s" kindref="compound">huff_node_s</ref><sp/>*l;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>ival;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sval;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhuff__node__s" kindref="compound">huff_node_s</ref><sp/>*r;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>r;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}<sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structhuff__codeword__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_s</ref><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>ival;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sval;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>r;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>nbits,<sp/>codeword;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}<sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>HUFF_CODE_INT,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>HUFF_CODE_STR</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structhuff__code__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhuff__code__s" kindref="compound">huff_code_s</ref><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>int16<sp/>refcount;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>maxbits;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>type;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>*firstcode;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>*numl;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>**syms;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhash__table__s" kindref="compound">hash_table_t</ref><sp/>*codewords;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fh;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbit__encode__s" kindref="compound">bit_encode_t</ref><sp/>*be;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boff;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="normal">huff_node_new_int(int32<sp/>val)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*hn<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hn));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>hn-&gt;r.ival<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hn;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="normal">huff_node_new_str(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*val)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*hn<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hn));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>hn-&gt;r.sval<sp/>=<sp/><ref refid="ckd__alloc_8h_1ad313f92478859f9e4ea99d0f6e78c393" kindref="member">ckd_salloc</ref>(val);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hn;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="normal">huff_node_new_parent(<ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*l,<sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*r)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*hn<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hn));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>hn-&gt;l<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>hn-&gt;r.r<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Propagate<sp/>maximum<sp/>bit<sp/>length.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;nbits<sp/>&gt;<sp/>l-&gt;nbits)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hn-&gt;nbits<sp/>=<sp/>r-&gt;nbits<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hn-&gt;nbits<sp/>=<sp/>l-&gt;nbits<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hn;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">huff_node_free_int(<ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*root)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;l)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_free_int(root-&gt;l);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_free_int(root-&gt;r.r);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(root);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">huff_node_free_str(<ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*root,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freestr)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;l)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_free_str(root-&gt;l,<sp/>freestr);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_free_str(root-&gt;r.r,<sp/>freestr);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freestr)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(root-&gt;r.sval);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(root);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="normal">huff_code_build_tree(<ref refid="structheap__s" kindref="compound">heap_t</ref><sp/>*q)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*root<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>rf;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="heap_8h_1a1c713d67123e96974505edfa4346cb0f" kindref="member">heap_size</ref>(q)<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*l,<sp/>*r,<sp/>*p;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>lf,<sp/>rf;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap_8h_1a387c8913b4c62ad1a5c4702a4e6dbdbf" kindref="member">heap_pop</ref>(q,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;l,<sp/>&amp;lf);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap_8h_1a387c8913b4c62ad1a5c4702a4e6dbdbf" kindref="member">heap_pop</ref>(q,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;r,<sp/>&amp;rf);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>huff_node_new_parent(l,<sp/>r);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap_8h_1a64bcded2de5086c5d246ff760caa74a3" kindref="member">heap_insert</ref>(q,<sp/>p,<sp/>lf<sp/>+<sp/>rf);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="heap_8h_1a387c8913b4c62ad1a5c4702a4e6dbdbf" kindref="member">heap_pop</ref>(q,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;root,<sp/>&amp;rf);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">huff_code_canonicalize(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*root)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnode__s" kindref="compound">glist_t</ref><sp/>agenda;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>*nextcode;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>ncw;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;firstcode<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;maxbits+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc-&gt;firstcode));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;syms<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;maxbits+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc-&gt;syms));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;numl<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;maxbits+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*nextcode));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>nextcode<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;maxbits+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*nextcode));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Traverse<sp/>the<sp/>tree,<sp/>annotating<sp/>it<sp/>with<sp/>the<sp/>actual<sp/>bit</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>lengths,<sp/>and<sp/>histogramming<sp/>them<sp/>in<sp/>numl.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;nbits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ncw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(NULL,<sp/>root);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(agenda)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*node<sp/>=<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(agenda);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a68b51aea4de463b284a19668a713d502" kindref="member">gnode_free</ref>(agenda,<sp/>NULL);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;l)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;l-&gt;nbits<sp/>=<sp/>node-&gt;nbits<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(agenda,<sp/>node-&gt;l);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;r.r-&gt;nbits<sp/>=<sp/>node-&gt;nbits<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(agenda,<sp/>node-&gt;r.r);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;numl[node-&gt;nbits]++;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncw++;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>starting<sp/>codes<sp/>and<sp/>symbol<sp/>tables<sp/>for<sp/>each<sp/>bit<sp/>length.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;syms[hc-&gt;maxbits]<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;numl[hc-&gt;maxbits],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**hc-&gt;syms));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>hc-&gt;maxbits<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;firstcode[i]<sp/>=<sp/>(hc-&gt;firstcode[i+1]<sp/>+<sp/>hc-&gt;numl[i+1])<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;syms[i]<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;numl[i],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**hc-&gt;syms));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(nextcode,<sp/>hc-&gt;firstcode,<sp/>(hc-&gt;maxbits<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*nextcode));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Traverse<sp/>the<sp/>tree<sp/>again<sp/>to<sp/>produce<sp/>the<sp/>codebook<sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;codewords<sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(ncw,<sp/>HASH_CASE_YES);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(NULL,<sp/>root);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(agenda)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*node<sp/>=<sp/><ref refid="glist_8h_1ace56682f14d84cc456c805d26fd86734" kindref="member">gnode_ptr</ref>(agenda);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a68b51aea4de463b284a19668a713d502" kindref="member">gnode_free</ref>(agenda,<sp/>NULL);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;l)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(agenda,<sp/>node-&gt;l);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agenda<sp/>=<sp/><ref refid="glist_8h_1a77a9c20b7df5a289477af405ab778377" kindref="member">glist_add_ptr</ref>(agenda,<sp/>node-&gt;r.r);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>codebook<sp/>entry,<sp/>which<sp/>also<sp/>retains<sp/>symbol<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*cw;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>codeword<sp/>=<sp/>nextcode[node-&gt;nbits]<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>node-&gt;nbits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>hc-&gt;syms[node-&gt;nbits]<sp/>+<sp/>(codeword<sp/>-<sp/>hc-&gt;firstcode[node-&gt;nbits]);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw-&gt;nbits<sp/>=<sp/>node-&gt;nbits;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw-&gt;r.sval<sp/>=<sp/>node-&gt;r.sval;<sp/></highlight><highlight class="comment">/*<sp/>Will<sp/>copy<sp/>ints<sp/>too...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw-&gt;codeword<sp/>=<sp/>codeword;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;type<sp/>==<sp/>HUFF_CODE_INT)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" kindref="member">hash_table_enter_bkey</ref>(hc-&gt;codewords,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)&amp;cw-&gt;r.ival,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cw-&gt;r.ival),</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)cw);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(hc-&gt;codewords,<sp/>cw-&gt;r.sval,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)cw);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nextcode[node-&gt;nbits];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(nextcode);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*</highlight></codeline>
<codeline lineno="229" refid="huff__code_8h_1a278b925caf4f2c93cbb63adc8f77bfa6" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a278b925caf4f2c93cbb63adc8f77bfa6" kindref="member">huff_code_build_int</ref>(int32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*values,<sp/>int32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*frequencies,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvals)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*root;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structheap__s" kindref="compound">heap_t</ref><sp/>*q;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>hc<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;refcount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;type<sp/>=<sp/>HUFF_CODE_INT;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>heap<sp/>with<sp/>nodes<sp/>for<sp/>each<sp/>symbol.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/><ref refid="heap_8h_1a9bc21333ce58caaf58e802d8b0190efd" kindref="member">heap_new</ref>();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvals;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap_8h_1a64bcded2de5086c5d246ff760caa74a3" kindref="member">heap_insert</ref>(q,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_new_int(values[i]),</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequencies[i]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>build<sp/>the<sp/>tree,<sp/>which<sp/>gives<sp/>us<sp/>codeword<sp/>lengths.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>huff_code_build_tree(q);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="heap_8h_1ab12b1efd6392eb574d2da9c981e7320c" kindref="member">heap_destroy</ref>(q);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>==<sp/>NULL<sp/>||<sp/>root-&gt;nbits<sp/>&gt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Huffman<sp/>trees<sp/>currently<sp/>limited<sp/>to<sp/>32<sp/>bits\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_free_int(root);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="huff__code_8h_1ac8678d07a65af1963cc0b3bd8b10d646" kindref="member">huff_code_free</ref>(hc);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>a<sp/>canonical<sp/>codebook.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;maxbits<sp/>=<sp/>root-&gt;nbits;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>huff_code_canonicalize(hc,<sp/>root);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tree<sp/>no<sp/>longer<sp/>needed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>huff_node_free_int(root);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hc;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*</highlight></codeline>
<codeline lineno="269" refid="huff__code_8h_1af5d0c85a2ad206c277ecde2a085af790" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1af5d0c85a2ad206c277ecde2a085af790" kindref="member">huff_code_build_str</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*values,<sp/>int32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*frequencies,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvals)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__node__s" kindref="compound">huff_node_t</ref><sp/>*root;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structheap__s" kindref="compound">heap_t</ref><sp/>*q;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>hc<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;refcount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;type<sp/>=<sp/>HUFF_CODE_STR;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>heap<sp/>with<sp/>nodes<sp/>for<sp/>each<sp/>symbol.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/><ref refid="heap_8h_1a9bc21333ce58caaf58e802d8b0190efd" kindref="member">heap_new</ref>();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvals;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap_8h_1a64bcded2de5086c5d246ff760caa74a3" kindref="member">heap_insert</ref>(q,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_new_str(values[i]),</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequencies[i]);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>build<sp/>the<sp/>tree,<sp/>which<sp/>gives<sp/>us<sp/>codeword<sp/>lengths.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>huff_code_build_tree(q);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="heap_8h_1ab12b1efd6392eb574d2da9c981e7320c" kindref="member">heap_destroy</ref>(q);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>==<sp/>NULL<sp/>||<sp/>root-&gt;nbits<sp/>&gt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="err_8h_1a87a0a12135a290cf16d06b63fcfa0ccf" kindref="member">E_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Huffman<sp/>trees<sp/>currently<sp/>limited<sp/>to<sp/>32<sp/>bits\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_node_free_str(root,<sp/>TRUE);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="huff__code_8h_1ac8678d07a65af1963cc0b3bd8b10d646" kindref="member">huff_code_free</ref>(hc);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>a<sp/>canonical<sp/>codebook.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;maxbits<sp/>=<sp/>root-&gt;nbits;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>huff_code_canonicalize(hc,<sp/>root);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tree<sp/>no<sp/>longer<sp/>needed<sp/>(note<sp/>we<sp/>retain<sp/>pointers<sp/>to<sp/>its<sp/>strings).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>huff_node_free_str(root,<sp/>FALSE);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hc;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*</highlight></codeline>
<codeline lineno="309" refid="huff__code_8h_1a873745b79dac884cbb1b5bdf12e069e6" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a873745b79dac884cbb1b5bdf12e069e6" kindref="member">huff_code_read</ref>(FILE<sp/>*infh)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>hc<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;refcount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;maxbits<sp/>=<sp/>fgetc(infh);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;type<sp/>=<sp/>fgetc(infh);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Two<sp/>bytes<sp/>of<sp/>padding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>fgetc(infh);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>fgetc(infh);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>stuff.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;firstcode<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;maxbits<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc-&gt;firstcode));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;numl<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;maxbits<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc-&gt;numl));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;syms<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;maxbits<sp/>+<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*hc-&gt;syms));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>the<sp/>symbol<sp/>tables.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;codewords<sp/>=<sp/><ref refid="hash__table_8h_1a56d93e8c03e066b77377ac6eab50cfae" kindref="member">hash_table_new</ref>(hc-&gt;maxbits,<sp/>HASH_CASE_YES);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>hc-&gt;maxbits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;hc-&gt;firstcode[i],<sp/>4,<sp/>1,<sp/>infh)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_BE_32(&amp;hc-&gt;firstcode[i]);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;hc-&gt;numl[i],<sp/>4,<sp/>1,<sp/>infh)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_BE_32(&amp;hc-&gt;numl[i]);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;syms[i]<sp/>=<sp/><ref refid="ckd__alloc_8h_1aa00ef21903bc4f8a972488417adc8d2e" kindref="member">ckd_calloc</ref>(hc-&gt;numl[i],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(**hc-&gt;syms));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>hc-&gt;numl[i];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*cw<sp/>=<sp/>&amp;hc-&gt;syms[i][j];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw-&gt;nbits<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw-&gt;codeword<sp/>=<sp/>hc-&gt;firstcode[i]<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;type<sp/>==<sp/>HUFF_CODE_INT)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(&amp;cw-&gt;r.ival,<sp/>4,<sp/>1,<sp/>infh)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error_out;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_BE_32(&amp;cw-&gt;r.ival);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a6f5752fadefe2662adb2c141f1511062" kindref="member">hash_table_enter_bkey</ref>(hc-&gt;codewords,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)&amp;cw-&gt;r.ival,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cw-&gt;r.ival),</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)cw);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw-&gt;r.sval<sp/>=<sp/><ref refid="pio_8h_1a11e0daa4f315d01c2e030d3a0abe702c" kindref="member">fread_line</ref>(infh,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw-&gt;r.sval[len-1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1aebfe63c3869c271b125a8413ee384412" kindref="member">hash_table_enter</ref>(hc-&gt;codewords,<sp/>cw-&gt;r.sval,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)cw);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hc;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">error_out:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="huff__code_8h_1ac8678d07a65af1963cc0b3bd8b10d646" kindref="member">huff_code_free</ref>(hc);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="huff__code_8h_1a6b91641e852a8eb4c4d32f40ff6dd055" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a6b91641e852a8eb4c4d32f40ff6dd055" kindref="member">huff_code_write</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/>FILE<sp/>*outfh)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Maximum<sp/>codeword<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>fputc(hc-&gt;maxbits,<sp/>outfh);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Symbol<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>fputc(hc-&gt;type,<sp/>outfh);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Two<sp/>extra<sp/>bytes<sp/>(for<sp/>future<sp/>use<sp/>and<sp/>alignment)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>fputc(0,<sp/>outfh);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>fputc(0,<sp/>outfh);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>each<sp/>codeword<sp/>length:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>hc-&gt;maxbits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>val;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Starting<sp/>code,<sp/>number<sp/>of<sp/>codes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>hc-&gt;firstcode[i];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Canonically<sp/>big-endian<sp/>(like<sp/>the<sp/>data<sp/>itself)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_BE_32(&amp;val);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;val,<sp/>4,<sp/>1,<sp/>outfh);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>hc-&gt;numl[i];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_BE_32(&amp;val);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;val,<sp/>4,<sp/>1,<sp/>outfh);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Symbols<sp/>for<sp/>each<sp/>code<sp/>(FIXME:<sp/>Should<sp/>compress<sp/>these<sp/>too)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>hc-&gt;numl[i];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;type<sp/>==<sp/>HUFF_CODE_INT)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32<sp/>val<sp/>=<sp/>hc-&gt;syms[i][j].r.ival;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP_BE_32(&amp;val);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;val,<sp/>4,<sp/>1,<sp/>outfh);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>them<sp/>all<sp/>separated<sp/>by<sp/>newlines,<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>fgets()<sp/>will<sp/>read<sp/>them<sp/>for<sp/>us.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(outfh,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>hc-&gt;syms[i][j].r.sval);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">huff_code_dump_codebits(FILE<sp/>*dumpfh,<sp/>uint32<sp/>nbits,<sp/>uint32<sp/>codeword)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>i;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbits;<sp/>++i)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputc((codeword<sp/>&amp;<sp/>(1&lt;&lt;(nbits-i-1)))<sp/>?<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/>dumpfh);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="huff__code_8h_1a821658831cbe9b1199c756435d0ad4aa" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a821658831cbe9b1199c756435d0ad4aa" kindref="member">huff_code_dump</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/>FILE<sp/>*dumpfh)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Print<sp/>out<sp/>all<sp/>codewords.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(dumpfh,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>codeword<sp/>length:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>hc-&gt;maxbits);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(dumpfh,<sp/></highlight><highlight class="stringliteral">&quot;Symbols<sp/>are<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(hc-&gt;type<sp/>==<sp/>HUFF_CODE_STR)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;strings&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;ints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(dumpfh,<sp/></highlight><highlight class="stringliteral">&quot;Codewords:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>hc-&gt;maxbits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>hc-&gt;numl[i];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;type<sp/>==<sp/>HUFF_CODE_STR)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(dumpfh,<sp/></highlight><highlight class="stringliteral">&quot;%-30s&quot;</highlight><highlight class="normal">,<sp/>hc-&gt;syms[i][j].r.sval);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(dumpfh,<sp/></highlight><highlight class="stringliteral">&quot;%-30d&quot;</highlight><highlight class="normal">,<sp/>hc-&gt;syms[i][j].r.ival);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huff_code_dump_codebits(dumpfh,<sp/>hc-&gt;syms[i][j].nbits,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;syms[i][j].codeword);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(dumpfh,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*</highlight></codeline>
<codeline lineno="443" refid="huff__code_8h_1a26a70d1b1704f1af985e67127e622a7b" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a26a70d1b1704f1af985e67127e622a7b" kindref="member">huff_code_retain</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>++hc-&gt;refcount;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hc;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="huff__code_8h_1ac8678d07a65af1963cc0b3bd8b10d646" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1ac8678d07a65af1963cc0b3bd8b10d646" kindref="member">huff_code_free</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--hc-&gt;refcount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hc-&gt;refcount;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>hc-&gt;maxbits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>hc-&gt;numl[i];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;type<sp/>==<sp/>HUFF_CODE_STR)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(hc-&gt;syms[i][j].r.sval);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(hc-&gt;syms[i]);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(hc-&gt;firstcode);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(hc-&gt;numl);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(hc-&gt;syms);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash__table_8h_1a0a588c22946f8cc16328973035ed19e3" kindref="member">hash_table_free</ref>(hc-&gt;codewords);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ckd__alloc_8h_1a31c6b405558620ac37599737b5722fbf" kindref="member">ckd_free</ref>(hc);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">FILE<sp/>*</highlight></codeline>
<codeline lineno="475" refid="huff__code_8h_1a9698821197737e3e1be9533a3059c82c" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a9698821197737e3e1be9533a3059c82c" kindref="member">huff_code_attach</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/>FILE<sp/>*fh,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*oldfh<sp/>=<sp/><ref refid="huff__code_8h_1a403f575701c1d5fd2ddef1d001cf53e3" kindref="member">huff_code_detach</ref>(hc);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;fh<sp/>=<sp/>fh;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;be<sp/>=<sp/><ref refid="pio_8h_1a82e4694a4c13c96550f2410f8c63b1f5" kindref="member">bit_encode_attach</ref>(hc-&gt;fh);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldfh;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">FILE<sp/>*</highlight></codeline>
<codeline lineno="486" refid="huff__code_8h_1a403f575701c1d5fd2ddef1d001cf53e3" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a403f575701c1d5fd2ddef1d001cf53e3" kindref="member">huff_code_detach</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*oldfh<sp/>=<sp/>hc-&gt;fh;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;be)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a3e818645e567961225977a1923debc3d" kindref="member">bit_encode_flush</ref>(hc-&gt;be);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1a8330637520174419771670ed740c9049" kindref="member">bit_encode_free</ref>(hc-&gt;be);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;be<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>hc-&gt;fh<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldfh;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="huff__code_8h_1acf369555b8784eee944f7ebc97b6b825" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1acf369555b8784eee944f7ebc97b6b825" kindref="member">huff_code_encode_int</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/>int32<sp/>sym,<sp/>uint32<sp/>*outcw)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*cw;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a91f5b3924c0e3a50f94c86bb5fd078e8" kindref="member">hash_table_lookup_bkey</ref>(hc-&gt;codewords,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)&amp;sym,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sym),</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;cw)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;be)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1ae71dedb663c8e3ae8b91dbfbc95ac420" kindref="member">bit_encode_write_cw</ref>(hc-&gt;be,<sp/>cw-&gt;codeword,<sp/>cw-&gt;nbits);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outcw)<sp/>*outcw<sp/>=<sp/>cw-&gt;codeword;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cw-&gt;nbits;</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="huff__code_8h_1a24fe76f501a7a0485f3e9485c60fae32" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a24fe76f501a7a0485f3e9485c60fae32" kindref="member">huff_code_encode_str</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*sym,<sp/>uint32<sp/>*outcw)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*cw;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hash__table_8h_1a9a1e5ed410eb96f514b00fdce770fbd7" kindref="member">hash_table_lookup</ref>(hc-&gt;codewords,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sym,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;cw)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;be)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pio_8h_1ae71dedb663c8e3ae8b91dbfbc95ac420" kindref="member">bit_encode_write_cw</ref>(hc-&gt;be,<sp/>cw-&gt;codeword,<sp/>cw-&gt;nbits);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outcw)<sp/>*outcw<sp/>=<sp/>cw-&gt;codeword;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cw-&gt;nbits;</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*</highlight></codeline>
<codeline lineno="531"><highlight class="normal">huff_code_decode_data(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**inout_data,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*inout_data_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*inout_offset)</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>*inout_data;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*end<sp/>=<sp/>data<sp/>+<sp/>*inout_data_len;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>*inout_offset;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>cw;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cwlen;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>*data++;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>!!(byte<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(7-offset++)));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>cwlen<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;%.*x<sp/>&quot;,<sp/>cwlen,<sp/>cw);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cwlen<sp/>&lt;=<sp/>hc-&gt;maxbits<sp/>&amp;&amp;<sp/>cw<sp/>&lt;<sp/>hc-&gt;firstcode[cwlen])<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cwlen;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>end)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte<sp/>=<sp/>*data++;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>|=<sp/>!!(byte<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(7-offset++)));</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;%.*x<sp/>&quot;,<sp/>cwlen,<sp/>cw);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cwlen<sp/>&gt;<sp/>hc-&gt;maxbits)<sp/></highlight><highlight class="comment">/*<sp/>FAIL:<sp/>invalid<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>the<sp/>last<sp/>byte<sp/>back<sp/>if<sp/>there<sp/>are<sp/>bits<sp/>left<sp/>over.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--data;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;%.*x\n&quot;,<sp/>cwlen,<sp/>cw);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>*inout_data_len<sp/>=<sp/>end<sp/>-<sp/>data;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>*inout_data<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>*inout_offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hc-&gt;syms[cwlen]<sp/>+<sp/>(cw<sp/>-<sp/>hc-&gt;firstcode[cwlen]);</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*</highlight></codeline>
<codeline lineno="576"><highlight class="normal">huff_code_decode_fh(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>cw;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cwlen;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((byte<sp/>=<sp/>fgetc(hc-&gt;fh))<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>!!(byte<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(7-hc-&gt;boff++)));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>cwlen<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;%.*x<sp/>&quot;,<sp/>cwlen,<sp/>cw);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cwlen<sp/>&lt;=<sp/>hc-&gt;maxbits<sp/>&amp;&amp;<sp/>cw<sp/>&lt;<sp/>hc-&gt;firstcode[cwlen])<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cwlen;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;boff<sp/>&gt;<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((byte<sp/>=<sp/>fgetc(hc-&gt;fh))<sp/>==<sp/>EOF)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;boff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>|=<sp/>!!(byte<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(7-hc-&gt;boff++)));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;%.*x<sp/>&quot;,<sp/>cwlen,<sp/>cw);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cwlen<sp/>&gt;<sp/>hc-&gt;maxbits)<sp/></highlight><highlight class="comment">/*<sp/>FAIL:<sp/>invalid<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>the<sp/>last<sp/>byte<sp/>back<sp/>if<sp/>there<sp/>are<sp/>bits<sp/>left<sp/>over.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;boff<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ungetc(byte,<sp/>hc-&gt;fh);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hc-&gt;boff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf(&quot;%.*x\n&quot;,<sp/>cwlen,<sp/>cw);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hc-&gt;syms[cwlen]<sp/>+<sp/>(cw<sp/>-<sp/>hc-&gt;firstcode[cwlen]);</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612" refid="huff__code_8h_1a9155dd07a0a24393ef0e4e66cb314140" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1a9155dd07a0a24393ef0e4e66cb314140" kindref="member">huff_code_decode_int</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outval,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**inout_data,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*inout_data_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*inout_offset)</highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*cw;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inout_data)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>huff_code_decode_data(hc,<sp/>inout_data,<sp/>inout_data_len,<sp/>inout_offset);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;fh)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>huff_code_decode_fh(hc);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cw<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outval)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outval<sp/>=<sp/>cw-&gt;r.ival;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="634" refid="huff__code_8h_1aec0908ece3a695f8a3f6619d8d726e57" refkind="member"><highlight class="normal"><ref refid="huff__code_8h_1aec0908ece3a695f8a3f6619d8d726e57" kindref="member">huff_code_decode_str</ref>(<ref refid="structhuff__code__s" kindref="compound">huff_code_t</ref><sp/>*hc,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**inout_data,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*inout_data_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*inout_offset)</highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhuff__codeword__s" kindref="compound">huff_codeword_t</ref><sp/>*cw;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inout_data)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>huff_code_decode_data(hc,<sp/>inout_data,<sp/>inout_data_len,<sp/>inout_offset);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hc-&gt;fh)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cw<sp/>=<sp/>huff_code_decode_fh(hc);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cw<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cw-&gt;r.sval;</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/libsphinxbase/util/huff_code.c"/>
  </compounddef>
</doxygen>
